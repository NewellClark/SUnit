<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SUnit</name>
    </assembly>
    <members>
        <member name="T:SUnit.Assert">
            <summary>
            Contains methods for performing assertions. Every unit test framework has a class like this.
            </summary>
        </member>
        <member name="M:SUnit.Assert.That``1(``0)">
            <summary>
            Used to specify the actual value when writing assertions. For example,
            <code>Assert.That(2 + 2).Is.Not.EqualTo(5);</code>.
            </summary>
            <typeparam name="TActual"></typeparam>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="T:SUnit.Constraints.EqualToConstraint`1">
            <summary>
            Constraint that tests whether a value is equal to an expected value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SUnit.Discovery.Finder">
            <summary>
            Contains methods for finding tests.
            </summary>
        </member>
        <member name="M:SUnit.Discovery.Finder.IsValidTestMethod(System.Reflection.MethodInfo)">
            <summary>
            Indicates whether the specified <see cref="T:System.Reflection.MethodInfo"/> is a valid test method.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/> to inspect.</param>
            <returns>True if the specified <see cref="T:System.Reflection.MethodInfo"/> is valid.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:SUnit.Discovery.Finder.FindAllValidTestMethods(System.Type)">
            <summary>
            Finds all the methods on the specified type that are valid test methods.
            </summary>
            <param name="type">The type to search.</param>
            <returns>All methods defined on the type that are valid test methods.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is null.
            </exception>
        </member>
        <member name="T:SUnit.Discovery.FixtureFactory">
            <summary>
            A method that is responsible for instantiating a Fixture.
            </summary>
        </member>
        <member name="M:SUnit.Discovery.FixtureFactory.Build">
            <summary>
            Instantiates the fixture.
            </summary>
            <returns>A newly-instantiated fixture.</returns>
        </member>
        <member name="P:SUnit.Discovery.TestCase.Name">
            <summary>
            Gets the name of the test method.
            </summary>
        </member>
        <member name="P:SUnit.Discovery.TestCase.Fixture">
            <summary>
            Gets the type that the test method was declared on.
            </summary>
        </member>
        <member name="P:SUnit.Discovery.TestCase.Factory">
            <summary>
            Gets the name of the factory method that will instantiate the fixture that the test will be called on.
            </summary>
        </member>
        <member name="T:SUnit.Fixtures.Factory">
            <summary>
            An object that can be used to instantiate a <see cref="T:SUnit.Fixtures.Fixture"/>.
            </summary>
        </member>
        <member name="P:SUnit.Fixtures.Factory.Fixture">
            <summary>
            Gets the <see cref="T:SUnit.Fixtures.Fixture"/> that the <see cref="T:SUnit.Fixtures.Factory"/> instantiates.
            </summary>
        </member>
        <member name="M:SUnit.Fixtures.Factory.Build">
            <summary>
            Instantiates the <see cref="T:SUnit.Fixtures.Fixture"/>.
            </summary>
            <returns>An instantiated <see cref="T:SUnit.Fixtures.Fixture"/>.</returns>
        </member>
        <member name="T:SUnit.Fixtures.Fixture">
            <summary>
            A class that defines unit tests.
            </summary>
        </member>
        <member name="P:SUnit.Fixtures.Fixture.Name">
            <summary>
            Gets the unqualified name of the class that the fixture represents.
            </summary>
        </member>
        <member name="P:SUnit.Fixtures.Fixture.Tests">
            <summary>
            Gets all the test methods on the fixture.
            </summary>
        </member>
        <member name="P:SUnit.Fixtures.Fixture.Factories">
            <summary>
            Gets all the methods that can be used to instantiate the fixture.
            </summary>
        </member>
        <member name="T:SUnit.Fixtures.TestMethod">
            <summary>
            A unit test method.
            </summary>
        </member>
        <member name="P:SUnit.Fixtures.TestMethod.Fixture">
            <summary>
            Gets the <see cref="T:SUnit.Fixtures.Fixture"/> that defines the <see cref="T:SUnit.Fixtures.TestMethod"/>.
            </summary>
        </member>
        <member name="P:SUnit.Fixtures.TestMethod.Name">
            <summary>
            Gets the name of the method.
            </summary>
        </member>
        <member name="M:SUnit.Fixtures.TestMethod.Execute(System.Object)">
            <summary>
            Executes the <see cref="T:SUnit.Fixtures.TestMethod"/> for the specified fixture instance.
            </summary>
            <param name="fixture">An instance of the class that defines the <see cref="T:SUnit.Fixtures.TestMethod"/>.</param>
            <returns>The result of executing the test.</returns>
        </member>
        <member name="M:SUnit.Fixtures.TestMethod.ToString">
            <summary>
            Overridden to display the method name.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SUnit.Fixtures.ResultKind">
            <summary>
            The kind of result.
            </summary>
        </member>
        <member name="F:SUnit.Fixtures.ResultKind.Error">
            <summary>
            The test did not run due to an error.
            </summary>
        </member>
        <member name="F:SUnit.Fixtures.ResultKind.Fail">
            <summary>
            The test ran, and it failed.
            </summary>
        </member>
        <member name="F:SUnit.Fixtures.ResultKind.Pass">
            <summary>
            The test ran, and it passed.
            </summary>
        </member>
        <member name="T:SUnit.Fixtures.UnitTest">
            <summary>
            A single unit test that can be executed.
            </summary>
        </member>
        <member name="P:SUnit.Fixtures.UnitTest.Fixture">
            <summary>
            Gets the <see cref="T:SUnit.Fixtures.Fixture"/> that defines the test.
            </summary>
        </member>
        <member name="P:SUnit.Fixtures.UnitTest.Name">
            <summary>
            Gets the name of the test method.
            </summary>
        </member>
        <member name="M:SUnit.Fixtures.UnitTest.ToString">
            <summary>
            Overridden to display the name of the method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SUnit.Fixtures.UnitTest.Run">
            <summary>
            Runs the unit test, returning a <see cref="T:SUnit.Fixtures.TestResult"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SUnit.IConstraint`1">
            <summary>
            A constraint that can be applied to value. 
            </summary>
            <typeparam name="T">The type of value the constraint can be applied to.</typeparam>
        </member>
        <member name="M:SUnit.IConstraint`1.Apply(`0)">
            <summary>
            Applies the constraint to the specified value.
            </summary>
            <param name="value">The value to apply the constraint to.</param>
            <returns>Whether the value satisfies the constraint.</returns>
        </member>
        <member name="M:SUnit.IConstraint`1.op_LogicalNot(SUnit.IConstraint{`0})">
            <summary>
            Creates a new <see cref="T:SUnit.IConstraint`1"/> that passes if its operand fails.
            </summary>
            <param name="operand"></param>
            <returns>A <see cref="T:SUnit.IConstraint`1"/> that passes if the operand fails.</returns>
        </member>
        <member name="P:SUnit.IConstraint`1.Inverted">
            <summary>
            Creates a new <see cref="T:SUnit.IConstraint`1"/> that passes when the current <see cref="T:SUnit.IConstraint`1"/> fails.
            </summary>
        </member>
        <member name="M:SUnit.IConstraint`1.op_BitwiseAnd(SUnit.IConstraint{`0},SUnit.IConstraint{`0})">
            <summary>
            Creates a <see cref="T:SUnit.IConstraint`1"/> that passes if both operands pass.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>A new <see cref="T:SUnit.IConstraint`1"/> that passes if both operands pass.</returns>
        </member>
        <member name="M:SUnit.IConstraint`1.op_BitwiseOr(SUnit.IConstraint{`0},SUnit.IConstraint{`0})">
            <summary>
            Creates a <see cref="T:SUnit.IConstraint`1"/> that passes if either or both operands passes.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>A new <see cref="T:SUnit.IConstraint`1"/> that passes if either or both operands pass.</returns>
        </member>
        <member name="M:SUnit.IConstraint`1.op_ExclusiveOr(SUnit.IConstraint{`0},SUnit.IConstraint{`0})">
            <summary>
            Creates a <see cref="T:SUnit.IConstraint`1"/> that passes if exactly one operand passes, but fails if both 
            operands pass or if both operands fail.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>A new <see cref="T:SUnit.IConstraint`1"/> that passes if exactly one operand passes.</returns>
        </member>
        <member name="T:SUnit.Is`1">
            <summary>
            Contains methods and properties for applying tests to an actual value.
            </summary>
            <typeparam name="TActual"></typeparam>
        </member>
        <member name="P:SUnit.Is`1.Not">
            <summary>
            Inverts any <see cref="T:SUnit.Test"/> that is applied to the current actual value.
            </summary>
        </member>
        <member name="M:SUnit.Is`1.EqualTo(`0)">
            <summary>
            Tests if the actual value is equal to the expected value.
            </summary>
            <param name="expected">The value that we expect the actual value to be equal to.</param>
            <returns></returns>
        </member>
        <member name="P:SUnit.Is`1.Null">
            <summary>
            Tests whether the actual value is <see langword="null"/>.
            </summary>
        </member>
        <member name="T:SUnit.IsExtensions">
            <summary>
            Extension methods for <see cref="T:SUnit.Is`1"/>.
            </summary>
        </member>
        <member name="M:SUnit.IsExtensions.LessThan``1(SUnit.Is{``0},``0)">
            <summary>
            Tests whether the actual value is less than the specified <paramref name="expected"/> value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="expected">The value that we should be less than.</param>
            <returns></returns>
        </member>
        <member name="M:SUnit.IsExtensions.GreaterThan``1(SUnit.Is{``0},``0)">
            <summary>
            Tests whether the actual value is greater than the specified <paramref name="expected"/> value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="expected">The value that we should be greater than.</param>
            <returns>A test that tests whether the actual value is greater than the expected value.</returns>
        </member>
        <member name="M:SUnit.IsExtensions.LessThanOrEqualTo``1(SUnit.Is{``0},``0)">
            <summary>
            Tests whether the actual value is less than or equal to the specified <paramref name="expected"/> value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="expected"></param>
            <returns>A test that tests whether the actual value is less than or equal to the specified expected value.</returns>
        </member>
        <member name="M:SUnit.IsExtensions.GreaterThanOrEqualTo``1(SUnit.Is{``0},``0)">
            <summary>
            Tests whether the actual value is greater than or equal to the specified <paramref name="expected"/> value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="expected"></param>
            <returns></returns>
        </member>
        <member name="T:SUnit.IsTest`1">
            <summary>
            A test produced from applying a constraint to an Is value.
            </summary>
            <typeparam name="TActual">The type of the actual value under test.</typeparam>
        </member>
        <member name="P:SUnit.IsTest`1.Passed">
            <summary>
            Indicates whether the test passed.
            </summary>
        </member>
        <member name="M:SUnit.IsTest`1.ToString">
            <summary>
            Overridden to output the constraint, and the actual value.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SUnit.IsTest`1.And">
            <summary>
            Allows multiple constraints to be chained to the same value using boolean AND.
            </summary>
        </member>
        <member name="P:SUnit.IsTest`1.Or">
            <summary>
            Allows chaining multiple constraints to the same value using boolean OR.
            </summary>
        </member>
        <member name="P:SUnit.IsTest`1.Xor">
            <summary>
            Allows chaining multiple constraints to the same value using boolean XOR.
            </summary>
        </member>
        <member name="T:SUnit.Test">
            <summary>
            The return type of all unit tests in <see cref="N:SUnit"/>.
            </summary>
        </member>
        <member name="P:SUnit.Test.Passed">
            <summary>
            Indicates whether the test passed.
            </summary>
        </member>
        <member name="M:SUnit.Test.ToString">
            <summary>
            Overridden to indicate test status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SUnit.Test.op_LogicalNot(SUnit.Test)">
            <summary>
            Creates a new test by inverting the current test.
            </summary>
            <param name="operand">The test to invert.</param>
            <returns>A new test that passes when the current test fails.</returns>
        </member>
        <member name="M:SUnit.Test.op_BitwiseAnd(SUnit.Test,SUnit.Test)">
            <summary>
            Creates a <see cref="T:SUnit.Test"/> that only passes if both operands pass.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>A <see cref="T:SUnit.Test"/> that only passes if both operands pass.</returns>
        </member>
        <member name="M:SUnit.Test.op_BitwiseOr(SUnit.Test,SUnit.Test)">
            <summary>
            Creates a <see cref="T:SUnit.Test"/> that passes if either or both operands pass.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>A <see cref="T:SUnit.Test"/> that passes if either operand, or both operands, passes.</returns>
        </member>
        <member name="M:SUnit.Test.op_ExclusiveOr(SUnit.Test,SUnit.Test)">
            <summary>
            Creates a <see cref="T:SUnit.Test"/> that passes if exactly one operand passes, but fails if neither operand
            passes or if both operands pass.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>A <see cref="T:SUnit.Test"/> that passes if exactly one operand passes.</returns>
        </member>
        <member name="P:SUnit.Test.Pass">
            <summary>
            Gets a test that always passes.
            </summary>
        </member>
        <member name="P:SUnit.Test.Fail">
            <summary>
            Gets a test that always fails.
            </summary>
        </member>
        <member name="M:SUnit.Test.LogicalNot(SUnit.Test)">
            <summary>
            Creates a new <see cref="T:SUnit.Test"/> that passes when the operand fails.
            </summary>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="M:SUnit.Test.BitwiseAnd(SUnit.Test,SUnit.Test)">
            <summary>
            Named alias for operator AND.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SUnit.Test.BitwiseOr(SUnit.Test,SUnit.Test)">
            <summary>
            Named alias for operator |.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SUnit.Test.Xor(SUnit.Test,SUnit.Test)">
            <summary>
            Named alias for operator XOR.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:SUnit.That`1">
            <summary>
            Specifies the actual value that was returned from whatever it is you are testing.
            Allows you to write code like <code>Assert.That(actual).Is.EqualTo(expected);</code>.
            </summary>
            <typeparam name="TActual">The type of the actual value.</typeparam>
        </member>
        <member name="P:SUnit.That`1.Is">
            <summary>
            Contains methods and properties for applying contstraints to the actual value specified in the 
            <see cref="M:SUnit.Assert.That``1(``0)"/> method.
            </summary>
        </member>
    </members>
</doc>
