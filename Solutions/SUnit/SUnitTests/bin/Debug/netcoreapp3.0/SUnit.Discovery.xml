<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SUnit.Discovery</name>
    </assembly>
    <members>
        <member name="T:SUnit.Discovery.Results.RanSuccessfullyResult">
            <summary>
            The <see cref="T:SUnit.Discovery.Results.TestResult"/> that is returned when a test runs to completion successfully.
            </summary>
        </member>
        <member name="P:SUnit.Discovery.Results.RanSuccessfullyResult.Result">
            <summary>
            The <see cref="T:SUnit.Test"/> returned by the test method.
            </summary>
        </member>
        <member name="T:SUnit.Discovery.Results.ResultKind">
            <summary>
            The kind of result.
            </summary>
        </member>
        <member name="F:SUnit.Discovery.Results.ResultKind.Error">
            <summary>
            The test did not run due to an error.
            </summary>
        </member>
        <member name="F:SUnit.Discovery.Results.ResultKind.Fail">
            <summary>
            The test ran, and it failed.
            </summary>
        </member>
        <member name="F:SUnit.Discovery.Results.ResultKind.Pass">
            <summary>
            The test ran, and it passed.
            </summary>
        </member>
        <member name="T:SUnit.Discovery.Results.TestResult">
            <summary>
            The result of running a test.
            </summary>
        </member>
        <member name="P:SUnit.Discovery.Results.TestResult.Kind">
            <summary>
            Whether the result was a pass, fail, or error.
            </summary>
        </member>
        <member name="T:SUnit.Discovery.Rules">
            <summary>
            Contains methods that define what constitutes a test, a fixture, a fixture factory, etc.
            </summary>
        </member>
        <member name="M:SUnit.Discovery.Rules.IsReturnTypeValidForTestMethod(System.Type)">
            <summary>
            Indicates whether the specified type is valid as the return type for a test method.
            </summary>
            <param name="returnType">The <see cref="T:System.Type"/> to test.</param>
            <returns>True if the specified type is a legal return type for a unit test method.</returns>
        </member>
        <member name="M:SUnit.Discovery.Rules.IsValidTestMethod(System.Reflection.MethodInfo)">
            <summary>
            Indicates whether the specified <see cref="T:System.Reflection.MethodInfo"/> is a valid test method.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/> to inspect.</param>
            <returns>True if the specified <see cref="T:System.Reflection.MethodInfo"/> is valid.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:SUnit.Discovery.Rules.FindAllValidTestMethods(System.Type)">
            <summary>
            Finds all the methods on the specified type that are valid test methods.
            </summary>
            <param name="type">The type to search.</param>
            <returns>All methods defined on the type that are valid test methods.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is null.
            </exception>
        </member>
        <member name="M:SUnit.Discovery.Rules.GetDefaultConstructor(System.Type)">
            <summary>
            Gets the eligible default constructor for the specified type, if one exists.
            </summary>
            <param name="type">The type to search.</param>
            <returns>The eligible default constructor, if one exists. <see langword="null"/> if none is found.</returns>
        </member>
        <member name="M:SUnit.Discovery.Rules.FindNamedConstructors(System.Type)">
            <summary>
            Finds all the valid named constructors on the specified type.
            </summary>
            <param name="type"></param>
            <returns>All the valid named constructor methods on the specified fixture type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:SUnit.Discovery.Rules.FindNamedConstructorsOnNonGenericType(System.Type)">
            <summary>
            Finds all the valid named constructors on a non generic, or constructed generic, fixture type.
            </summary>
            <param name="type">The type of the fixture. Must be either non-generic or a fully-constructed
            generic type. In other words, <see cref="P:System.Type.ContainsGenericParameters"/> 
            must be <see langword="false"/>.</param>
            <returns>All valid named constructor methods found on the fixture type.</returns>
        </member>
        <member name="M:SUnit.Discovery.Rules.FindNamedConstructorsOnGenericType(System.Type)">
            <summary>
            Finds all the valid named constructors on an unconstructed generic fixture type.
            On an unconstructed generic fixture type, a valid named constructor returns a constructed version
            of the fixture, or a subclass of a constructed version of the fixture.
            </summary>
            <param name="type">The type of the fixture. Must be a not-fully-constructed generic type. In other
            words, <see cref="P:System.Type.ContainsGenericParameters"/> must be <see langword="true"/>.</param>
            <returns>All valid named constructor methods found on the fixture type.</returns>
        </member>
        <member name="P:SUnit.Discovery.TraitPair.SerializedLength">
            <summary>
            Gets the length of the string that the TraitPair is serialized to.
            </summary>
        </member>
        <member name="M:SUnit.Discovery.TraitPair.Save">
            <summary>
            Saves the <see cref="T:SUnit.Discovery.TraitPair"/> as a string.
            </summary>
            <returns>The round-trippable string representation for the current <see cref="T:SUnit.Discovery.TraitPair"/>.</returns>
        </member>
        <member name="M:SUnit.Discovery.UnitTest.CreateDelegate">
            <summary>
            Creates a new fixture instance and binds a delegate for the test method to it.
            </summary>
            <returns>A newly-created delegate with a newly-created test fixture as the receiver.</returns>
        </member>
    </members>
</doc>
